/*****************************************
 *                   六足服务器程序                                    *
 *                   Copyright (c) V5_Lab, 2018                  *
 *                   Author:                               *
 *                   Version number:  0.00                         *
 *                   Date:                                                      *
 * ***************************************/
#include <ros/ros.h>
#include <simplemotion.h>
#include <hexapodservice/hexapodserviceAction.h>
#include <actionlib/server/simple_action_server.h>
#include <hexapodservice/legs.h>
#include <hexapodservice/legjoints.h>
#include "define.h"
#include "bufferedmotion.h"
#include <boost/format.hpp>

class Hexapodservice
{
private:
  ros::NodeHandle nh_;
  actionlib::SimpleActionServer<hexapodservice::hexapodserviceAction> as_;
  hexapodservice::hexapodserviceGoal goal_;
  hexapodservice::hexapodserviceResult result_;
  hexapodservice::hexapodserviceFeedback feedback_;
  hexapodservice::legjoints oneleg_;
  hexapodservice::legs legs_[6];
  //pose_pub_   姿态发布
  ros::Publisher pose_publisher;
  hexapodservice::leg hexapodPose;

  smbus bushandle;
  smint32 Temp;
  BufferedMotionAxis axis[24];
  bool motionActive;

public:
  Hexapodservice();
  ~Hexapodservice(){};
  smint32 pulseout_[24];
  smint32 pulsefb_[24];
  void executeCB(const actionlib::SimpleActionServer<hexapodservice::hexapodserviceAction>::GoalConstPtr &goal);
  void singlejoint2motor(const float pos, smint32 *pulse);
  //   bool velControl(smint32 pulse[4], smint32 vel[4]);
  smint32 MaxVel;
  std::vector<int32_t> pointsBuf[24];
  smint32 smPosFb[24][64];
  smint32 smPosFbAmount[24];
  void spinOnce();
  //参数传递
  std::string sm_ttyusb;
  int pointBufCapacity;
  int maxPointOneTrn;
  int32_t pointBufSize;
};

Hexapodservice::Hexapodservice() : as_(nh_, "hexapod_sm_service", boost::bind(&Hexapodservice::executeCB, this, _1), false)
{
  //发布机器人姿态
  pose_publisher = nh_.advertise<hexapodservice::leg>("hexapod_sm_pose", 1);

  as_.start();
  ROS_INFO("hexapod service started.");
  bushandle = -1;
  pulseout_[4] = {0};
  MaxVel = 10000;
  motionActive = false;

  //从参数服务器读取节点参数
  ros::param::get("~sm_ttyusb_name", sm_ttyusb);
  ros::param::get("~sm_point_buf_capacity", pointBufCapacity);
  ros::param::get("~sm_max_point_one_transmit", maxPointOneTrn);
  pointBufSize = 0;

  if (sm_ttyusb != "")
  {
    ROS_INFO("~sm_ttyusb_name = %s", sm_ttyusb.c_str());
  }
  else
  {
    sm_ttyusb = "/dev/hexapod_sm";
    ROS_INFO("~sm_ttyusb_name = %s", sm_ttyusb.c_str());
  }

  if ((pointBufCapacity >= 1000) && (pointBufCapacity <= 5000))
  {
    ROS_INFO("sm_point_buf_size = %d", pointBufCapacity);
  }
  else
  {
    pointBufCapacity = 3000;
    ROS_INFO("sm_point_buf_size = %d", pointBufCapacity);
  }

  if ((maxPointOneTrn >= 50) && (maxPointOneTrn <= 1000))
  {
    ROS_INFO("sm_max_point_one_transmit = %d", maxPointOneTrn);
  }
  else
  {
    maxPointOneTrn = 300;
    ROS_INFO("sm_max_point_one_transmit = %d", maxPointOneTrn);
  }

  //初始化pointbuf缓存，分配内存
  for (int i = 0; i < 24; i++)
  {
    pointsBuf[i].reserve(pointBufCapacity);
    pointsBuf[i].clear();
    //ROS_INFO("hexapod pointBuf[%d] capacity:%d, size:%d", i, (int)pointsBuf[i].capacity(), (int)pointsBuf[i].size());
  }
}

void Hexapodservice::singlejoint2motor(const float pos, smint32 *pulse)
{
  *pulse = round(4096 * (3005640.0 / 1300.0) * pos / 360.0);
}

/*bool Hexapodservice::velControl(smint32* pulse, smint32* vel)
{
  smint32 max_pulse;
  max_pulse = pulse[0];
  float t = 1.0f;
  int i = 0;
 
  for (i = 1; i < 4; i ++)
  {
    max_pulse = (max_pulse >= pulse[i] ? max_pulse : pulse[i] );
  }
  
  if ( max_pulse == 0) 
  {
    return false;
  }
  else
  {
//     MaxVel = max_pulse / 0.1;
    t = max_pulse / (float)MaxVel;
    for(i = 0; i < 4; i ++)
    {
      vel[i] = pulse[i] / t;
    }
    return true;
  }
}*/

void Hexapodservice::executeCB(const actionlib::SimpleActionServer<hexapodservice::hexapodserviceAction>::GoalConstPtr &goal)
{
  //simplemotion 控制, 开总线，使能电机，初始化总线等
  if (goal->MODE == SIMPLEMOTION_CONTROL)
  {
    switch (goal->SIMPLEMOTION_MODE)
    {
    //开总线
    case OPENBUS:
    {
      bushandle = smOpenBus("/dev/ttyUSB0");
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (bushandle < 0)
      {
        ROS_WARN("Open bus error!");
        //result_.result = "Open bus error!";
        as_.setAborted(result_);
      }
      else
      {
        ROS_INFO("Open bus succeeded.");
        //result_.result = "Open bus succeeded.";
        result_.status = getCumulativeStatus(bushandle);
        ROS_INFO("simplemotion status: %d", result_.status);
        as_.setSucceeded(result_);
      }
    }
    break;

    //关总线
    case CLOSEBUS:
    {
      smCloseBus(bushandle);
      ROS_INFO("Closed bus.");
      //result_.result = "Closed bus.";
      result_.status = getCumulativeStatus(bushandle);
      motionActive = false;
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      ROS_INFO("simplemotion status: %d", result_.status);
      as_.setSucceeded(result_);
    }
    break;

    //使能电机
    case ENABLEMOTOR:
    {
      for (int i = 1; i < 25; i++)
      {
        smSetParameter(bushandle, i, SMP_CONTROL_BITS1, 33);
      }
      result_.status = getCumulativeStatus(bushandle);
      ROS_INFO("simplemotion status: %d", result_.status);
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "enable motor finished";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "enable motor failed";
        as_.setAborted(result_);
      }
    }
    break;

    //关电机
    case DISABLEMOTOR:
    {
      for (int i = 1; i < 25; i++)
      {
        smSetParameter(bushandle, i, SMP_CONTROL_BITS1, 0);
      }
      result_.status = getCumulativeStatus(bushandle);
      motionActive = false;
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "disable motor finished";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "disable motor failed";
        as_.setAborted(result_);
      }
    }
    break;

    //初始化总线
    case INITAXIS:
    {
      for (int i = 0; i < 24; i++)
      {
        smBufferedInit(&axis[i], bushandle, i + 1, SAMPLE_RATE, SMP_ACTUAL_POSITION_FB, SM_RETURN_VALUE_24B);
        smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_TRAJ_PLANNER_VEL);
        smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_32B, 13000); //速度设置为10000
        smExecuteCommandQueue(bushandle, i + 1);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
      }
      result_.status = getCumulativeStatus(bushandle);
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "Init axis finished.";
        motionActive = true;
        result_.motionActive = motionActive;
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "Init axis failed.";
        motionActive = false;
        result_.motionActive = motionActive;
        as_.setAborted(result_);
      }
    }
    break;

    //获取simplemotion状态值
    case GETSTATUS:
    {
      result_.status = getCumulativeStatus(bushandle);
      //boost::format result_fm = boost::format("simplemotion status: %d") % result_.status;
      //result_.result = result_fm.str();
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      as_.setSucceeded(result_);
    }
    break;

    //清楚错误
    case CLEARFAULT:
    {
      for (int i = 1; i < 25; i++)
      {
        smSetParameter(bushandle, i, SMP_FAULTS, 0);
      }
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "clear fault  finished";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "clear fault  failed";
        as_.setAborted(result_);
      }
    }
    break;

    //关节复位，控制速度为5000
    case ALLLEGRESET:
    {
      for (int i = 0; i < 24; i++)
      {
        smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_TRAJ_PLANNER_VEL);
        smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_32B, 5000);
        smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_ABSOLUTE_POS_TARGET);
        smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_32B, 0);
        smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_RETURN_PARAM_ADDR);
        smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_24B, SMP_ACTUAL_POSITION_FB);
        smExecuteCommandQueue(bushandle, i + 1);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &pulsefb_[i]);
      }
      result_.status = getCumulativeStatus(bushandle);
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "Reseting all legs...";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "Reseting all legs failed.";
        as_.setAborted(result_);
      }
    }
    break;

    //清空buffer
    case ABORTMOTION:
    {
      for (int i = 0; i < 24; i++)
      {
        smBufferedAbort(&axis[i]);
        smBufferedDeinit(&axis[i]);
      }
      for (int i = 0; i < 24; i++)
      {
        pointsBuf[i].clear();
      }
      result_.status = getCumulativeStatus(bushandle);
      motionActive = false;
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "Aborting motion and deinitializing axis..";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "Aborting motion and deinitializing axis failed";
        as_.setAborted(result_);
      }
    }
    break;

    //读取所有电机编码器反馈
    case READALLLEGS:
    {
      for (int i = 0; i < 24; i++)
      {
        smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_RETURN_PARAM_ADDR);
        smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_24B, SMP_ACTUAL_POSITION_FB);
        smExecuteCommandQueue(bushandle, i + 1);
        smGetQueuedSMCommandReturnValue(bushandle, &Temp);
        smGetQueuedSMCommandReturnValue(bushandle, &pulsefb_[i]);
        //std::cout<<"motor"<<i<<" "<<pulsefb_[i]<<std::endl;
      }
      for (int leg_index = 0; leg_index < 6; leg_index++)
      {
        hexapodPose.leg[leg_index].coxa = pulsefb_[4 * leg_index] * 0.00000066347767;
        hexapodPose.leg[leg_index].femur = pulsefb_[4 * leg_index + 1] * 0.00000066347767;
        hexapodPose.leg[leg_index].tibia = pulsefb_[4 * leg_index + 2] * 0.00000066347767;
        hexapodPose.leg[leg_index].tarsus = pulsefb_[4 * leg_index + 3] * 0.00000066347767;
      }
      //发布机器人姿态
      pose_publisher.publish(hexapodPose);
      result_.status = getCumulativeStatus(bushandle);
      result_.motionActive = motionActive;
      pointBufSize = pointsBuf[0].size();
      result_.freespace = pointBufCapacity - pointBufSize;
      if (result_.status == 1)
      {
        //result_.result = "Read all motor succeeded.";
        as_.setSucceeded(result_);
      }
      else
      {
        //result_.result = "Read all motor failed.";
        as_.setAborted(result_);
      }
    }
    break;
    }
  }

  //控制一条腿
  if (goal->MODE == ONELEG_CONTROL)
  {
  }

  //控制六条腿
  if (goal->MODE == ALLLEGS_CONTROL)
  {
    smint32 positions[24][64];
    smint32 readData[24][64];
    smint32 readDataAmount[24];
    int maxpoints = goal->MAXPOINTS;

    pointBufSize = pointsBuf[0].size();
    if (maxpoints > (pointBufCapacity - pointBufSize))
    {
      maxpoints = pointBufCapacity - pointBufSize;
      ROS_ERROR("ERROR pointBuf out of boundary!");
    }

    //填充24个电机buffer
    for (int leg_index = 0; leg_index < 6; leg_index++)
    {
      for (int j = 0; j < maxpoints; j++)
      {
        pointsBuf[leg_index * 4].push_back(goal->ALLLEGS.leg[leg_index].coxa[j]);
        pointsBuf[leg_index * 4 + 1].push_back(goal->ALLLEGS.leg[leg_index].femur[j]);
        pointsBuf[leg_index * 4 + 2].push_back(goal->ALLLEGS.leg[leg_index].tibia[j]);
        pointsBuf[leg_index * 4 + 3].push_back(goal->ALLLEGS.leg[leg_index].tarsus[j]);
      }
    }

    /*
    //反馈编码器信息
    for(int leg_index = 0; leg_index < 6; leg_index++)
    {
      result_.ALLLEGS_fdbk.leg[leg_index].coxa = smPosFb[4*leg_index][0]*0.00000066347767;
      result_.ALLLEGS_fdbk.leg[leg_index].femur = smPosFb[4*leg_index+1][0]*0.00000066347767;
      result_.ALLLEGS_fdbk.leg[leg_index].tibia = smPosFb[4*leg_index+2][0]*0.00000066347767;
      result_.ALLLEGS_fdbk.leg[leg_index].tarsus = smPosFb[4*leg_index+3][0]*0.00000066347767;
    }
    */

    pointBufSize = pointsBuf[0].size();
    result_.freespace = pointBufCapacity - pointBufSize;
    result_.motionActive = motionActive;
    as_.setSucceeded(result_);
  }

  //一条腿复位
  if (goal->MODE == ONELEG_RESET)
  {
  }

  //六条腿复位
  if (goal->MODE == ALLLEGS_RESET)
  {
  }

  //get maxpoints
  if (goal->MODE == MAXPOINT_REQUEST)
  {
    pointBufSize = pointsBuf[0].size();
    result_.freespace = pointBufCapacity - pointBufSize;
    result_.motionActive = motionActive;
    result_.status = 1;
    if (result_.status == 1)
    {
      as_.setSucceeded(result_);
    }
    else
    {
      as_.setAborted(result_);
    }
  }

  /*
  //读取所有电机编码器反馈
  if( goal->MODE == READ_ALL_LEGS )
  {
    for(int i = 0; i < 24; i++)
    {
      smAppendSMCommandToQueue(bushandle, SM_SET_WRITE_ADDRESS, SMP_RETURN_PARAM_ADDR);
      smAppendSMCommandToQueue(bushandle, SM_WRITE_VALUE_24B, SMP_ACTUAL_POSITION_FB);
      smExecuteCommandQueue(bushandle, i+1);
      smGetQueuedSMCommandReturnValue(bushandle, &Temp);
      smGetQueuedSMCommandReturnValue(bushandle, &pulsefb_[i]);
      std::cout<<"motor"<<i<<" "<<pulsefb_[i]<<std::endl;
    }
    for(int leg_index = 0; leg_index < 6; leg_index++)
    {   
      result_.ALLLEGS_fdbk.leg[leg_index].coxa = pulsefb_[4*leg_index]*360.0/4096.0/(3005640.0/1300.0);
      result_.ALLLEGS_fdbk.leg[leg_index].femur = pulsefb_[4*leg_index+1]*360.0/4096.0/(3005640.0/1300.0);
      result_.ALLLEGS_fdbk.leg[leg_index].tibia = pulsefb_[4*leg_index+2]*360.0/4096.0/(3005640.0/1300.0);
      result_.ALLLEGS_fdbk.leg[leg_index].tarsus = pulsefb_[4*leg_index+3]*360.0/4096.0/(3005640.0/1300.0);
    }
    result_.status = getCumulativeStatus(bushandle);
    if(result_.status == 1)
    {
      //result_.result = "Read all motor succeeded.";
      as_.setSucceeded(result_);
    }
    else
    {
      //result_.result = "Read all motor failed.";
      as_.setAborted(result_);
    }
  }
  */
}

void Hexapodservice::spinOnce()
{
  smint32 positions[24][64];
  //smint32 readData[24][64];
  //smint32 readDataAmount[24];
  smint32 maxpoints = 0;

  //填充24个电机buffer
  if ((pointsBuf[0].size() > 0) && (true == motionActive))
  {
    smint32 freeSpace;
    smBufferedGetFree(&axis[0], &freeSpace);
    maxpoints = smBufferedGetMaxFillSize(&axis[0], freeSpace);
    //int minimumBufferFreeBytes = axis[0].bufferLength - 0.9 * axis[0].bufferLength;
    int32_t smStatus = getCumulativeStatus(bushandle);

    if (pointsBuf[0].size() < maxpoints)
    {
      maxpoints = pointsBuf[0].size();
    }

    if (maxpoints > 30)
    {
      maxpoints = 30;
    }

    if (maxpoints > 0)
    {
      for (int leg_index = 0; leg_index < 6; leg_index++)
      {
        for (int j = 0; j < maxpoints; j++)
        {
          positions[leg_index * 4][j] = pointsBuf[leg_index * 4][j];
          positions[leg_index * 4 + 1][j] = pointsBuf[leg_index * 4 + 1][j];
          positions[leg_index * 4 + 2][j] = pointsBuf[leg_index * 4 + 2][j];
          positions[leg_index * 4 + 3][j] = pointsBuf[leg_index * 4 + 3][j];
        }
      }

      for (int i = 0; i < 24; i++)
      {
        if(pointsBuf[i].size() < maxpoints)
        {
          pointsBuf[i].erase(pointsBuf[i].begin(), pointsBuf[i].end());
        }
        else
        {
          pointsBuf[i].erase(pointsBuf[i].begin(), pointsBuf[i].begin() + maxpoints);
        }
      }

      //将buffer发给总线
      smint32 bytesFilled;
      for (int i = 0; i < 24; i++)
      {
        smBufferedFillAndReceive(&axis[i], maxpoints, positions[i], &smPosFbAmount[i], smPosFb[i], &bytesFilled);
      }

      for (int leg_index = 0; leg_index < 6; leg_index++)
      {
        hexapodPose.leg[leg_index].coxa = smPosFb[4 * leg_index][0] * 0.00000066347767;
        hexapodPose.leg[leg_index].femur = smPosFb[4 * leg_index + 1][0] * 0.00000066347767;
        hexapodPose.leg[leg_index].tibia = smPosFb[4 * leg_index + 2][0] * 0.00000066347767;
        hexapodPose.leg[leg_index].tarsus = smPosFb[4 * leg_index + 3][0] * 0.00000066347767;
      }

      //----synchronize clocks of all devices to the current value of first axis----//
      smBufferedRunAndSyncClocks(&axis[0]);
      smStatus = getCumulativeStatus(bushandle);
    }

    //发布机器人姿态
    pose_publisher.publish(hexapodPose);
  }
}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "hexapod_service_node");
  ROS_INFO("instantiating the hexapod service");
  Hexapodservice as_object;
  ROS_INFO("going in to spin");
  ros::AsyncSpinner spinner(3); // Using 2 threads
  spinner.start();
  ros::Rate loop_rate(50);
  while (ros::ok())
  {
    as_object.spinOnce();
    ros::spinOnce();
    loop_rate.sleep();
  }
  return 0;
}
